'use strict'

require('./support/helpers.js')

contract('Coordinator', () => {
  const sourcePath = 'Coordinator.sol'
  let coordinator

  beforeEach(async () => {
    coordinator = await deploy(sourcePath)
  })

  it('has a limited public interface', () => {
    checkPublicABI(artifacts.require(sourcePath), [
      'getId',
      'initiateServiceAgreement',
      'serviceAgreements'
    ])
  })

  describe('#getId', () => {
    it('matches the ID generated by the oracle off-chain', async () => {
      let result = await coordinator.getId.call(1, 2, '0x85820c5ec619a1f517ee6cfeff545ec0ca1a90206e1a38c47f016d4137e801dd')
      assert.equal(result, '0x220072871b41155e7e1a6c45246a6d18a8a25350917d2c6c6c49d5d79a6af5bf')
    })
  })

  describe('#initiateServiceAgreement', () => {
    it('saves a service agreement struct from the parameters', async () => {
      await coordinator.initiateServiceAgreement(
        1,
        2,
        '0x85820c5ec619a1f517ee6cfeff545ec0ca1a90206e1a38c47f016d4137e801dd'
      )

      let sa = await coordinator.serviceAgreements.call(
        '0x220072871b41155e7e1a6c45246a6d18a8a25350917d2c6c6c49d5d79a6af5bf'
      )
      assert.equal(
        sa[0].toString(),
        bigNum(1).toString()
      )
      assert.equal(
        sa[1].toString(),
        bigNum(2).toString()
      )
      assert.equal(
        sa[2],
        '0x85820c5ec619a1f517ee6cfeff545ec0ca1a90206e1a38c47f016d4137e801dd'
      )
    })
  })
})
